[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "UploadSet",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "configure_uploads",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "IMAGES",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "UploadSet",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "configure_uploads",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "IMAGES",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ler_usuarios",
        "kind": 2,
        "importPath": "banco.login.app.app",
        "description": "banco.login.app.app",
        "peekOfCode": "def ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos\nusuarios = ler_usuarios()\n@app.route('/')",
        "detail": "banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "banco.login.app.app",
        "description": "banco.login.app.app",
        "peekOfCode": "def index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')",
        "detail": "banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "banco.login.app.app",
        "description": "banco.login.app.app",
        "peekOfCode": "def autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "banco.login.app.app",
        "description": "banco.login.app.app",
        "peekOfCode": "app = Flask(__name__, template_folder=os.path.abspath('templates'))\n# Função para ler usuários e senhas do arquivo\ndef ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos",
        "detail": "banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 5,
        "importPath": "banco.login.app.app",
        "description": "banco.login.app.app",
        "peekOfCode": "usuarios = ler_usuarios()\n@app.route('/')\ndef index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)",
        "detail": "banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "ler_usuarios",
        "kind": 2,
        "importPath": "camocim.banco.login.app.app",
        "description": "camocim.banco.login.app.app",
        "peekOfCode": "def ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos\nusuarios = ler_usuarios()\n@app.route('/')",
        "detail": "camocim.banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "camocim.banco.login.app.app",
        "description": "camocim.banco.login.app.app",
        "peekOfCode": "def index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')",
        "detail": "camocim.banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "camocim.banco.login.app.app",
        "description": "camocim.banco.login.app.app",
        "peekOfCode": "def autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "camocim.banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "camocim.banco.login.app.app",
        "description": "camocim.banco.login.app.app",
        "peekOfCode": "app = Flask(__name__, template_folder=os.path.abspath('templates'))\n# Função para ler usuários e senhas do arquivo\ndef ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos",
        "detail": "camocim.banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 5,
        "importPath": "camocim.banco.login.app.app",
        "description": "camocim.banco.login.app.app",
        "peekOfCode": "usuarios = ler_usuarios()\n@app.route('/')\ndef index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)",
        "detail": "camocim.banco.login.app.app",
        "documentation": {}
    },
    {
        "label": "ler_usuarios",
        "kind": 2,
        "importPath": "camocim.construçao.login.app.app",
        "description": "camocim.construçao.login.app.app",
        "peekOfCode": "def ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos\nusuarios = ler_usuarios()\n@app.route('/')",
        "detail": "camocim.construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "camocim.construçao.login.app.app",
        "description": "camocim.construçao.login.app.app",
        "peekOfCode": "def index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')",
        "detail": "camocim.construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "camocim.construçao.login.app.app",
        "description": "camocim.construçao.login.app.app",
        "peekOfCode": "def autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "camocim.construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "camocim.construçao.login.app.app",
        "description": "camocim.construçao.login.app.app",
        "peekOfCode": "app = Flask(__name__, template_folder=os.path.abspath('templates'))\n# Função para ler usuários e senhas do arquivo\ndef ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos",
        "detail": "camocim.construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 5,
        "importPath": "camocim.construçao.login.app.app",
        "description": "camocim.construçao.login.app.app",
        "peekOfCode": "usuarios = ler_usuarios()\n@app.route('/')\ndef index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)",
        "detail": "camocim.construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "camocim.login.menu.app",
        "description": "camocim.login.menu.app",
        "peekOfCode": "def index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]\n    title = request.form[\"title\"]\n    content = request.form[\"content\"]\n    image = request.files[\"image\"]\n    video = request.form[\"video\"]",
        "detail": "camocim.login.menu.app",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "camocim.login.menu.app",
        "description": "camocim.login.menu.app",
        "peekOfCode": "def upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]\n    title = request.form[\"title\"]\n    content = request.form[\"content\"]\n    image = request.files[\"image\"]\n    video = request.form[\"video\"]\n    # Salvar a imagem na pasta configurada\n    if image:\n        filename = photos.save(image)",
        "detail": "camocim.login.menu.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "camocim.login.menu.app",
        "description": "camocim.login.menu.app",
        "peekOfCode": "app = Flask(__name__)\n# Configuração do Flask-Uploads\nphotos = UploadSet(\"photos\", IMAGES)\napp.config[\"UPLOADED_PHOTOS_DEST\"] = \"uploads\"  # Pasta onde as imagens serão armazenadas\nconfigure_uploads(app, photos)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():",
        "detail": "camocim.login.menu.app",
        "documentation": {}
    },
    {
        "label": "photos",
        "kind": 5,
        "importPath": "camocim.login.menu.app",
        "description": "camocim.login.menu.app",
        "peekOfCode": "photos = UploadSet(\"photos\", IMAGES)\napp.config[\"UPLOADED_PHOTOS_DEST\"] = \"uploads\"  # Pasta onde as imagens serão armazenadas\nconfigure_uploads(app, photos)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]",
        "detail": "camocim.login.menu.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"UPLOADED_PHOTOS_DEST\"]",
        "kind": 5,
        "importPath": "camocim.login.menu.app",
        "description": "camocim.login.menu.app",
        "peekOfCode": "app.config[\"UPLOADED_PHOTOS_DEST\"] = \"uploads\"  # Pasta onde as imagens serão armazenadas\nconfigure_uploads(app, photos)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]\n    title = request.form[\"title\"]",
        "detail": "camocim.login.menu.app",
        "documentation": {}
    },
    {
        "label": "ler_usuarios",
        "kind": 2,
        "importPath": "construçao.login.app.app",
        "description": "construçao.login.app.app",
        "peekOfCode": "def ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos\nusuarios = ler_usuarios()\n@app.route('/')",
        "detail": "construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "construçao.login.app.app",
        "description": "construçao.login.app.app",
        "peekOfCode": "def index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')",
        "detail": "construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "construçao.login.app.app",
        "description": "construçao.login.app.app",
        "peekOfCode": "def autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)\n    else:\n        return render_template('acesso_negado.html')\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "construçao.login.app.app",
        "description": "construçao.login.app.app",
        "peekOfCode": "app = Flask(__name__, template_folder=os.path.abspath('templates'))\n# Função para ler usuários e senhas do arquivo\ndef ler_usuarios():\n    usuarios = {}\n    with open(os.path.join(os.path.dirname(__file__), 'usuarios.txt'), 'r') as arquivo:\n        for linha in arquivo:\n            usuario, senha = linha.strip().split(':')\n            usuarios[usuario] = senha\n    return usuarios\n# Usuários e senhas definidos",
        "detail": "construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 5,
        "importPath": "construçao.login.app.app",
        "description": "construçao.login.app.app",
        "peekOfCode": "usuarios = ler_usuarios()\n@app.route('/')\ndef index():\n    return render_template('login.html')\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    usuario = request.form['usuario']\n    senha = request.form['senha']\n    if usuario in usuarios and usuarios[usuario] == senha:\n        return render_template('acesso_permitido.html', usuario=usuario)",
        "detail": "construçao.login.app.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "login.menu.app",
        "description": "login.menu.app",
        "peekOfCode": "def index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]\n    title = request.form[\"title\"]\n    content = request.form[\"content\"]\n    image = request.files[\"image\"]\n    video = request.form[\"video\"]",
        "detail": "login.menu.app",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "login.menu.app",
        "description": "login.menu.app",
        "peekOfCode": "def upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]\n    title = request.form[\"title\"]\n    content = request.form[\"content\"]\n    image = request.files[\"image\"]\n    video = request.form[\"video\"]\n    # Salvar a imagem na pasta configurada\n    if image:\n        filename = photos.save(image)",
        "detail": "login.menu.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "login.menu.app",
        "description": "login.menu.app",
        "peekOfCode": "app = Flask(__name__)\n# Configuração do Flask-Uploads\nphotos = UploadSet(\"photos\", IMAGES)\napp.config[\"UPLOADED_PHOTOS_DEST\"] = \"uploads\"  # Pasta onde as imagens serão armazenadas\nconfigure_uploads(app, photos)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():",
        "detail": "login.menu.app",
        "documentation": {}
    },
    {
        "label": "photos",
        "kind": 5,
        "importPath": "login.menu.app",
        "description": "login.menu.app",
        "peekOfCode": "photos = UploadSet(\"photos\", IMAGES)\napp.config[\"UPLOADED_PHOTOS_DEST\"] = \"uploads\"  # Pasta onde as imagens serão armazenadas\nconfigure_uploads(app, photos)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]",
        "detail": "login.menu.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"UPLOADED_PHOTOS_DEST\"]",
        "kind": 5,
        "importPath": "login.menu.app",
        "description": "login.menu.app",
        "peekOfCode": "app.config[\"UPLOADED_PHOTOS_DEST\"] = \"uploads\"  # Pasta onde as imagens serão armazenadas\nconfigure_uploads(app, photos)\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    # Obter dados do formulário\n    company = request.form[\"company\"]\n    title = request.form[\"title\"]",
        "detail": "login.menu.app",
        "documentation": {}
    }
]